"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markOldNotificationsAsRead = exports.cleanupExpiredNotifications = exports.notifySystemUpdate = exports.notifyInspectionReminder = exports.notifyMaintenanceReminder = exports.notifyMaintenanceCompleted = exports.notifyMaintenanceCreated = exports.notifyInspectionRejected = exports.notifyInspectionApproved = exports.notifyInspectionCreated = exports.createNotification = void 0;
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
// ‚úÖ Fun√ß√£o principal para criar notifica√ß√£o
const createNotification = async (notificationData) => {
    try {
        // Verificar se o usu√°rio tem prefer√™ncias configuradas
        const preferences = await prisma.notificationPreference.findUnique({
            where: { userId: notificationData.userId }
        });
        // Se o usu√°rio desabilitou este tipo de notifica√ß√£o, n√£o criar
        if (preferences && !shouldSendNotification(notificationData.type, preferences)) {
            return null;
        }
        const notification = await prisma.notification.create({
            data: {
                userId: notificationData.userId,
                type: notificationData.type,
                title: notificationData.title,
                message: notificationData.message,
                priority: notificationData.priority || 'medium',
                data: notificationData.data || {},
                actionUrl: notificationData.actionUrl,
                expiresAt: notificationData.expiresAt
            }
        });
        console.log(`‚úÖ Notifica√ß√£o criada: ${notification.type} para usu√°rio ${notification.userId}`);
        return notification;
    }
    catch (error) {
        console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
        return null;
    }
};
exports.createNotification = createNotification;
// ‚úÖ Verificar se deve enviar notifica√ß√£o baseado nas prefer√™ncias
const shouldSendNotification = (type, preferences) => {
    switch (type) {
        case 'maintenance_reminder':
            return preferences.maintenanceReminders;
        case 'inspection_reminder':
            return preferences.inspectionReminders;
        case 'payment_reminder':
            return preferences.paymentReminders;
        case 'promotional':
            return preferences.promotions;
        case 'system_update':
            return preferences.systemUpdates;
        case 'emergency':
            return preferences.emergencyAlerts;
        default:
            return true;
    }
};
// ‚úÖ EVENTOS AUTOM√ÅTICOS DE NOTIFICA√á√ÉO
// 1. Notifica√ß√£o para nova inspe√ß√£o criada
const notifyInspectionCreated = async (inspectionId, userId, vehiclePlate) => {
    await (0, exports.createNotification)({
        userId,
        type: 'inspection_reminder',
        title: 'üîç Nova Inspe√ß√£o Registrada',
        message: `Inspe√ß√£o registrada para o ve√≠culo ${vehiclePlate}. Acompanhe o status.`,
        priority: 'medium',
        data: { inspectionId, vehiclePlate },
        actionUrl: `/inspections/${inspectionId}`
    });
};
exports.notifyInspectionCreated = notifyInspectionCreated;
// 2. Notifica√ß√£o para inspe√ß√£o aprovada
const notifyInspectionApproved = async (inspectionId, userId, vehiclePlate) => {
    await (0, exports.createNotification)({
        userId,
        type: 'inspection_reminder',
        title: '‚úÖ Inspe√ß√£o Aprovada',
        message: `Inspe√ß√£o do ve√≠culo ${vehiclePlate} foi aprovada com sucesso!`,
        priority: 'high',
        data: { inspectionId, vehiclePlate, status: 'approved' },
        actionUrl: `/inspections/${inspectionId}`
    });
};
exports.notifyInspectionApproved = notifyInspectionApproved;
// 3. Notifica√ß√£o para inspe√ß√£o n√£o conforme
const notifyInspectionRejected = async (inspectionId, userId, vehiclePlate) => {
    await (0, exports.createNotification)({
        userId,
        type: 'inspection_reminder',
        title: '‚ùå Inspe√ß√£o N√£o Conforme',
        message: `Inspe√ß√£o do ve√≠culo ${vehiclePlate} foi rejeitada. Verifique os detalhes.`,
        priority: 'high',
        data: { inspectionId, vehiclePlate, status: 'rejected' },
        actionUrl: `/inspections/${inspectionId}`
    });
};
exports.notifyInspectionRejected = notifyInspectionRejected;
// 4. Notifica√ß√£o para nova manuten√ß√£o
const notifyMaintenanceCreated = async (maintenanceId, userId, vehiclePlate, service) => {
    await (0, exports.createNotification)({
        userId,
        type: 'maintenance_reminder',
        title: 'üîß Nova Manuten√ß√£o Agendada',
        message: `Manuten√ß√£o "${service}" agendada para o ve√≠culo ${vehiclePlate}.`,
        priority: 'medium',
        data: { maintenanceId, vehiclePlate, service },
        actionUrl: `/maintenances/${maintenanceId}`
    });
};
exports.notifyMaintenanceCreated = notifyMaintenanceCreated;
// 5. Notifica√ß√£o para manuten√ß√£o conclu√≠da
const notifyMaintenanceCompleted = async (maintenanceId, userId, vehiclePlate, service) => {
    await (0, exports.createNotification)({
        userId,
        type: 'maintenance_reminder',
        title: '‚úÖ Manuten√ß√£o Conclu√≠da',
        message: `Manuten√ß√£o "${service}" do ve√≠culo ${vehiclePlate} foi conclu√≠da.`,
        priority: 'medium',
        data: { maintenanceId, vehiclePlate, service, status: 'completed' },
        actionUrl: `/maintenances/${maintenanceId}`
    });
};
exports.notifyMaintenanceCompleted = notifyMaintenanceCompleted;
// 6. Lembrete de manuten√ß√£o preventiva (baseado em quilometragem)
const notifyMaintenanceReminder = async (userId, vehiclePlate, service, currentKm) => {
    await (0, exports.createNotification)({
        userId,
        type: 'maintenance_reminder',
        title: '‚ö†Ô∏è Lembrete de Manuten√ß√£o',
        message: `Ve√≠culo ${vehiclePlate} precisa de ${service}. Km atual: ${currentKm.toLocaleString()}`,
        priority: 'high',
        data: { vehiclePlate, service, currentKm },
        actionUrl: '/maintenances/new',
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // Expira em 30 dias
    });
};
exports.notifyMaintenanceReminder = notifyMaintenanceReminder;
// 7. Lembrete de inspe√ß√£o anual
const notifyInspectionReminder = async (userId, vehiclePlate, daysUntilExpiration) => {
    const urgency = daysUntilExpiration <= 7 ? 'high' : daysUntilExpiration <= 30 ? 'medium' : 'low';
    const icon = daysUntilExpiration <= 7 ? 'üö®' : 'üìã';
    await (0, exports.createNotification)({
        userId,
        type: 'inspection_reminder',
        title: `${icon} Lembrete de Inspe√ß√£o`,
        message: `Inspe√ß√£o do ve√≠culo ${vehiclePlate} vence em ${daysUntilExpiration} dias.`,
        priority: urgency,
        data: { vehiclePlate, daysUntilExpiration },
        actionUrl: '/inspections/new',
        expiresAt: new Date(Date.now() + daysUntilExpiration * 24 * 60 * 60 * 1000)
    });
};
exports.notifyInspectionReminder = notifyInspectionReminder;
// 8. Notifica√ß√£o de sistema
const notifySystemUpdate = async (userId, title, message) => {
    await (0, exports.createNotification)({
        userId,
        type: 'system_update',
        title: `üì± ${title}`,
        message,
        priority: 'low',
        data: { type: 'system_update' },
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // Expira em 7 dias
    });
};
exports.notifySystemUpdate = notifySystemUpdate;
// ‚úÖ FUN√á√ÉO UTILIT√ÅRIA PARA LIMPAR NOTIFICA√á√ïES EXPIRADAS
const cleanupExpiredNotifications = async () => {
    try {
        const result = await prisma.notification.deleteMany({
            where: {
                expiresAt: {
                    lt: new Date()
                }
            }
        });
        console.log(`üßπ Limpeza autom√°tica: ${result.count} notifica√ß√µes expiradas removidas`);
        return result.count;
    }
    catch (error) {
        console.error('‚ùå Erro na limpeza de notifica√ß√µes:', error);
        return 0;
    }
};
exports.cleanupExpiredNotifications = cleanupExpiredNotifications;
// ‚úÖ FUN√á√ÉO PARA MARCAR NOTIFICA√á√ïES ANTIGAS COMO LIDAS (15 dias)
const markOldNotificationsAsRead = async () => {
    try {
        const fifteenDaysAgo = new Date(Date.now() - 15 * 24 * 60 * 60 * 1000);
        const result = await prisma.notification.updateMany({
            where: {
                createdAt: { lt: fifteenDaysAgo },
                isRead: false
            },
            data: {
                isRead: true,
                readAt: new Date()
            }
        });
        console.log(`üìñ Marca√ß√£o autom√°tica: ${result.count} notifica√ß√µes antigas marcadas como lidas`);
        return result.count;
    }
    catch (error) {
        console.error('‚ùå Erro na marca√ß√£o autom√°tica:', error);
        return 0;
    }
};
exports.markOldNotificationsAsRead = markOldNotificationsAsRead;
//# sourceMappingURL=notificationService.js.map