"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeCronJobs = void 0;
const node_cron_1 = __importDefault(require("node-cron"));
const notificationService_1 = require("./notificationService");
// ‚úÖ JOB CRON: Limpeza di√°ria de notifica√ß√µes expiradas
// Executa todos os dias √†s 02:00
node_cron_1.default.schedule('0 2 * * *', async () => {
    console.log('üßπ Iniciando limpeza autom√°tica de notifica√ß√µes...');
    try {
        const expiredCount = await (0, notificationService_1.cleanupExpiredNotifications)();
        const markedCount = await (0, notificationService_1.markOldNotificationsAsRead)();
        console.log(`‚úÖ Limpeza conclu√≠da:
- ${expiredCount} notifica√ß√µes expiradas removidas
- ${markedCount} notifica√ß√µes antigas marcadas como lidas`);
    }
    catch (error) {
        console.error('‚ùå Erro na limpeza autom√°tica:', error);
    }
});
// ‚úÖ JOB CRON: Verifica√ß√£o de lembretes de manuten√ß√£o
// Executa todos os dias √†s 08:00
node_cron_1.default.schedule('0 8 * * *', async () => {
    console.log('üîß Verificando lembretes de manuten√ß√£o...');
    try {
        // TODO: Implementar verifica√ß√£o baseada em quilometragem
        // Este job seria usado para verificar ve√≠culos que precisam de manuten√ß√£o
        console.log('‚ÑπÔ∏è Verifica√ß√£o de manuten√ß√£o: implementa√ß√£o pendente');
    }
    catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o de manuten√ß√£o:', error);
    }
});
// ‚úÖ JOB CRON: Verifica√ß√£o de lembretes de inspe√ß√£o
// Executa todas as segundas-feiras √†s 09:00
node_cron_1.default.schedule('0 9 * * 1', async () => {
    console.log('üìã Verificando lembretes de inspe√ß√£o...');
    try {
        // TODO: Implementar verifica√ß√£o de datas de vencimento de inspe√ß√£o
        // Este job seria usado para verificar inspe√ß√µes pr√≥ximas do vencimento
        console.log('‚ÑπÔ∏è Verifica√ß√£o de inspe√ß√£o: implementa√ß√£o pendente');
    }
    catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o de inspe√ß√£o:', error);
    }
});
const initializeCronJobs = () => {
    console.log('‚è∞ Tarefas autom√°ticas de notifica√ß√£o inicializadas:');
    console.log('   - Limpeza di√°ria √†s 02:00');
    console.log('   - Verifica√ß√£o de manuten√ß√£o √†s 08:00');
    console.log('   - Verifica√ß√£o de inspe√ß√£o √†s segundas 09:00');
};
exports.initializeCronJobs = initializeCronJobs;
//# sourceMappingURL=cronJobs.js.map