import { MaterialCommunityIcons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import React, { useEffect, useState } from 'react';
import { Alert, FlatList, Modal, Platform, ScrollView, StyleSheet, TouchableOpacity, View } from 'react-native';
import { Button, Card, Chip, Text, TextInput } from 'react-native-paper';

import { UpdateMaintenanceRequest } from '../../api/maintenance.api';
import DocumentUploader, { DocumentFile } from '../../components/maintenance/DocumentUploader';
import { useMaintenanceContext } from '../../hooks/useMaintenanceContext';
import { useVehicleContext } from '../../hooks/useVehicleContext';
import { getMaintenanceById, updateMaintenance } from '../../services/maintenanceApi';
import { AppColors } from '../../styles/colors';
import { Maintenance } from '../../types/maintenance.types';

interface EditMaintenanceScreenProps {
    route: {
        params: {
            maintenanceId: string;
        };
    };
    navigation: any;
}

// üéØ Componente principal da tela de edi√ß√£o
export default function EditMaintenanceScreen({ route, navigation }: EditMaintenanceScreenProps) {
    const { maintenanceId } = route.params;

    const {
        updateMaintenance: updateMaintenanceAPI,
        isUpdating,
        updateSuccess,
        updateError,
        isUsingRealAPI
    } = useMaintenanceContext();

    const { vehicles } = useVehicleContext();

    // Buscar dados da manuten√ß√£o
    const [maintenance, setMaintenance] = useState<Maintenance | null>(null);
    const [loading, setLoading] = useState(true);

    // Estados do formul√°rio
    const [selectedVehicle, setSelectedVehicle] = useState<string>('');
    const [showVehicleModal, setShowVehicleModal] = useState(false);
    const [selectedServices, setSelectedServices] = useState<string[]>([]);
    const [date, setDate] = useState(new Date());
    const [showDatePicker, setShowDatePicker] = useState(false);
    const [currentKm, setCurrentKm] = useState('');
    const [workshopName, setWorkshopName] = useState('');
    const [workshopCnpj, setWorkshopCnpj] = useState('');
    const [workshopAddress, setWorkshopAddress] = useState('');
    const [value, setValue] = useState('');
    const [documents, setDocuments] = useState<DocumentFile[]>([]);

    // Valida√ß√µes
    const [errors, setErrors] = useState<{ [key: string]: string }>({});

    // ‚úÖ Servi√ßos expandidos com categorias
    const COMMON_SERVICES = [
        // Motor e mec√¢nica
        'Troca de √≥leo',
        'Troca de filtro',
        'Filtro de √≥leo',
        'Filtro de ar',
        'Filtro de combust√≠vel',
        'Velas de igni√ß√£o',
        'Correia dentada',
        'Correia do alternador',
        'Bateria',
        'Radiador',
        'Bomba d\'√°gua',
        'Termostato',
        'V√°lvulas',
        'Pist√µes',
        'Bielas',
        'Virabrequim',
        'Cabe√ßote',
        'Junta do cabe√ßote',

        // Suspens√£o e dire√ß√£o
        'Alinhamento',
        'Balanceamento',
        'Amortecedores',
        'Molas',
        'Suspens√£o',
        'Coxins',
        'Buchas',
        'Bieletas',
        'Bandeja',
        'Piv√¥',
        'Terminal de dire√ß√£o',
        'Caixa de dire√ß√£o',
        'Bomba hidr√°ulica',
        'Fluido dire√ß√£o',

        // Freios
        'Freios dianteiros',
        'Freios traseiros',
        'Pastilhas de freio',
        'Discos de freio',
        'Tambor de freio',
        'Lonas de freio',
        'Cilindro de freio',
        'Fluido de freio',
        'Freio de m√£o',
        'Servo freio',

        // Pneus e rodas
        'Troca de pneus',
        'Calibragem',
        'Rod√≠zio de pneus',
        'Conserto de pneu',
        'V√°lvulas',
        'Rodas',

        // Transmiss√£o
        'Embreagem',
        'Disco de embreagem',
        'Plat√¥',
        'Rolamento',
        'Cabo de embreagem',
        'Cilindro de embreagem',
        'C√¢mbio',
        '√ìleo do c√¢mbio',
        'Diferencial',
        'Card√£',
        'Homocin√©tica',

        // Ar condicionado
        'Ar condicionado',
        'Compressor A/C',
        'Condensador',
        'Evaporador',
        'Filtro do ar condicionado',
        'G√°s refrigerante',
        'Correia do compressor',

        // Sistema el√©trico
        'Sistema el√©trico',
        'Alternador',
        'Motor de partida',
        'Bobina de igni√ß√£o',
        'Cabos de vela',
        'Fus√≠veis',
        'Rel√©s',
        'Fia√ß√£o',
        'Far√≥is',
        'Lanternas',
        'Pisca-pisca',
        'Bateria auxiliar',

        // Escapamento
        'Escapamento',
        'Silencioso',
        'Coletor de escape',
        'Catalisador',
        'Sonda lambda',

        // Outros
        'Revis√£o geral',
        'Lavagem',
        'Enceramento',
        'Diagn√≥stico',
        'Scanner',
        'Teste de emiss√µes',
        'Inspe√ß√£o t√©cnica',
        'Documenta√ß√£o',
    ];

    // Carregar dados da manuten√ß√£o
    useEffect(() => {
        const loadMaintenance = () => {
            const maintenanceData = getMaintenanceById(maintenanceId);
            if (maintenanceData) {
                setMaintenance(maintenanceData);

                // Pr√©-popular o formul√°rio
                setSelectedVehicle(maintenanceData.vehicleId);
                setSelectedServices(maintenanceData.services);
                setDate(new Date(maintenanceData.date));
                setCurrentKm(maintenanceData.currentKm.toString());
                setWorkshopName(maintenanceData.workshop.name);
                setWorkshopCnpj(maintenanceData.workshop.cnpj || '');
                setWorkshopAddress(maintenanceData.workshop.address || '');
                setValue(maintenanceData.value.toString());
                // N√£o h√° campo description na interface Maintenance

                // Converter URLs de documentos para DocumentFile
                const documentsFiles: DocumentFile[] = maintenanceData.documents.map((url, index) => ({
                    id: `doc_${index}`,
                    uri: url,
                    name: `documento_${index + 1}.${url.includes('pdf') ? 'pdf' : 'jpg'}`,
                    type: url.includes('pdf') ? 'pdf' : 'image',
                    category: 'outros'
                }));
                setDocuments(documentsFiles);
            } else {
                Alert.alert('Erro', 'Manuten√ß√£o n√£o encontrada');
                navigation.goBack();
            }
            setLoading(false);
        };

        loadMaintenance();
    }, [maintenanceId, navigation]);

    // ‚úÖ Configurar header com bot√£o cancelar
    useEffect(() => {
        navigation.setOptions({
            title: 'Editar Manuten√ß√£o',
            headerLeft: () => (
                <TouchableOpacity
                    style={styles.headerButton}
                    onPress={handleCancel}
                >
                    <MaterialCommunityIcons
                        name="close"
                        size={24}
                        color={AppColors.primary}
                    />
                </TouchableOpacity>
            ),
        });
    }, [navigation]);

    // ‚úÖ Fun√ß√£o para cancelar edi√ß√£o
    const handleCancel = () => {
        Alert.alert(
            'Cancelar Edi√ß√£o',
            'Tem certeza que deseja cancelar? As altera√ß√µes n√£o salvas ser√£o perdidas.',
            [
                { text: 'Continuar Editando', style: 'cancel' },
                {
                    text: 'Cancelar',
                    style: 'destructive',
                    onPress: () => navigation.goBack()
                }
            ]
        );
    };

    // ‚úÖ Valida√ß√µes do formul√°rio
    const validateForm = (): boolean => {
        const newErrors: { [key: string]: string } = {};

        if (!selectedVehicle) {
            newErrors.vehicle = 'Selecione um ve√≠culo';
        }

        if (selectedServices.length === 0) {
            newErrors.services = 'Selecione pelo menos um servi√ßo';
        }

        // ‚úÖ Valida√ß√£o de data (n√£o pode ser futura e n√£o pode ser anterior a 60 dias)
        const today = new Date();
        const maxPastDate = new Date(today);
        maxPastDate.setDate(today.getDate() - 60);

        if (date > today) {
            newErrors.date = 'A data n√£o pode ser futura';
        } else if (date < maxPastDate) {
            newErrors.date = 'A data n√£o pode ser anterior a 60 dias';
        }

        if (!currentKm || isNaN(Number(currentKm)) || Number(currentKm) <= 0) {
            newErrors.currentKm = 'Quilometragem deve ser um n√∫mero v√°lido maior que zero';
        }

        if (!workshopName.trim()) {
            newErrors.workshopName = 'Nome da oficina √© obrigat√≥rio';
        }

        // ‚úÖ Valida√ß√£o de CNPJ (opcional, mas se preenchido deve estar correto)
        if (workshopCnpj.trim()) {
            const cnpjRegex = /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/;
            if (!cnpjRegex.test(workshopCnpj)) {
                newErrors.workshopCnpj = 'CNPJ deve estar no formato 00.000.000/0000-00';
            }
        }

        if (!value || isNaN(Number(value)) || Number(value) <= 0) {
            newErrors.value = 'Valor deve ser um n√∫mero v√°lido maior que zero';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // ‚úÖ Fun√ß√£o para salvar altera√ß√µes
    const handleSaveChanges = async () => {
        if (!validateForm()) {
            Alert.alert('Erro de Valida√ß√£o', 'Por favor, corrija os campos destacados');
            return;
        }

        if (!maintenance) return;

        try {
            // ‚úÖ Verificar se todos os documentos foram enviados ao servidor
            const pendingUploads = documents.filter(doc => doc.isUploading);
            if (pendingUploads.length > 0) {
                Alert.alert(
                    'Upload em Andamento',
                    'Aguarde todos os documentos serem enviados antes de salvar as altera√ß√µes.'
                );
                return;
            }

            const updateData: Partial<Maintenance> = {
                vehicleId: selectedVehicle,
                services: selectedServices,
                date: date.toISOString(),
                currentKm: Number(currentKm),
                workshop: {
                    name: workshopName,
                    cnpj: workshopCnpj,
                    address: workshopAddress,
                },
                value: Number(value),
                documents: documents.map(doc => doc.uploadedUrl || doc.uri), // ‚úÖ Usar URL do servidor
                updatedAt: new Date().toISOString(),
            };

            if (isUsingRealAPI && updateMaintenanceAPI) {
                // Usar API real
                await updateMaintenanceAPI(maintenanceId, updateData as UpdateMaintenanceRequest);
            } else {
                // Usar mock
                const updatedMaintenance = updateMaintenance(maintenanceId, updateData);
                if (!updatedMaintenance) {
                    throw new Error('Falha ao atualizar manuten√ß√£o');
                }
            }

            Alert.alert(
                'Sucesso',
                'Manuten√ß√£o atualizada com sucesso!',
                [
                    {
                        text: 'OK',
                        onPress: () => navigation.goBack()
                    }
                ]
            );
        } catch (error) {
            console.error('Erro ao atualizar manuten√ß√£o:', error);
            Alert.alert('Erro', 'N√£o foi poss√≠vel atualizar a manuten√ß√£o. Tente novamente.');
        }
    };

    // ‚úÖ Renderizar loading
    if (loading) {
        return (
            <View style={styles.loadingContainer}>
                <Text variant="bodyMedium">Carregando dados da manuten√ß√£o...</Text>
            </View>
        );
    }

    if (!maintenance) {
        return (
            <View style={styles.errorContainer}>
                <MaterialCommunityIcons name="alert-circle" size={48} color={AppColors.danger} />
                <Text variant="headlineSmall" style={styles.errorTitle}>
                    Manuten√ß√£o n√£o encontrada
                </Text>
                <Button mode="contained" onPress={() => navigation.goBack()}>
                    Voltar
                </Button>
            </View>
        );
    }

    // ‚úÖ Renderizar seletor de ve√≠culo
    const renderVehicleSelector = () => {
        const selectedVehicleData = vehicles.find(v => v.id === selectedVehicle);

        return (
            <Card style={styles.card}>
                <Card.Content>
                    <Text variant="titleMedium" style={styles.sectionTitle}>
                        Ve√≠culo
                    </Text>

                    <TouchableOpacity
                        style={[
                            styles.vehicleSelector,
                            errors.vehicle && styles.inputError
                        ]}
                        onPress={() => setShowVehicleModal(true)}
                    >
                        <View style={styles.vehicleSelectorContent}>
                            <MaterialCommunityIcons
                                name="car"
                                size={20}
                                color={selectedVehicleData ? AppColors.primary : AppColors.text}
                            />
                            <Text
                                variant="bodyMedium"
                                style={[
                                    styles.vehicleSelectorText,
                                    !selectedVehicleData && styles.placeholder
                                ]}
                            >
                                {selectedVehicleData
                                    ? `${selectedVehicleData.brand?.name} ${selectedVehicleData.model?.name} - ${selectedVehicleData.licensePlate}`
                                    : 'Selecionar ve√≠culo'
                                }
                            </Text>
                            <MaterialCommunityIcons
                                name="chevron-down"
                                size={20}
                                color={AppColors.text}
                            />
                        </View>
                    </TouchableOpacity>

                    {errors.vehicle && (
                        <Text style={styles.errorText}>{errors.vehicle}</Text>
                    )}
                </Card.Content>
            </Card>
        );
    };

    // ‚úÖ Modal de sele√ß√£o de ve√≠culo
    const renderVehicleModal = () => (
        <Modal
            visible={showVehicleModal}
            transparent={true}
            animationType="slide"
            onRequestClose={() => setShowVehicleModal(false)}
        >
            <View style={styles.modalOverlay}>
                <View style={styles.modalContent}>
                    <View style={styles.modalHeader}>
                        <Text variant="headlineSmall">Selecionar Ve√≠culo</Text>
                        <TouchableOpacity onPress={() => setShowVehicleModal(false)}>
                            <MaterialCommunityIcons name="close" size={24} color={AppColors.text} />
                        </TouchableOpacity>
                    </View>

                    <FlatList
                        data={vehicles}
                        keyExtractor={(item) => item.id}
                        renderItem={({ item }) => (
                            <TouchableOpacity
                                style={[
                                    styles.vehicleItem,
                                    selectedVehicle === item.id && styles.vehicleItemSelected
                                ]}
                                onPress={() => {
                                    setSelectedVehicle(item.id);
                                    setShowVehicleModal(false);
                                    setErrors(prev => ({ ...prev, vehicle: '' }));
                                }}
                            >
                                <MaterialCommunityIcons
                                    name="car"
                                    size={24}
                                    color={selectedVehicle === item.id ? AppColors.primary : AppColors.text}
                                />
                                <View style={styles.vehicleItemInfo}>
                                    <Text variant="titleMedium">
                                        {item.brand?.name} {item.model?.name}
                                    </Text>
                                    <Text variant="bodyMedium" style={styles.vehicleItemDetails}>
                                        {item.modelYear} ‚Ä¢ {item.licensePlate}
                                    </Text>
                                </View>
                                {selectedVehicle === item.id && (
                                    <MaterialCommunityIcons
                                        name="check"
                                        size={20}
                                        color={AppColors.primary}
                                    />
                                )}
                            </TouchableOpacity>
                        )}
                    />
                </View>
            </View>
        </Modal>
    );

    // ‚úÖ Renderizar seletor de servi√ßos
    const renderServicesSelector = () => (
        <Card style={styles.card}>
            <Card.Content>
                <Text variant="titleMedium" style={styles.sectionTitle}>
                    Servi√ßos Realizados
                </Text>

                <Text variant="bodySmall" style={styles.sectionDescription}>
                    Selecione os servi√ßos que foram realizados na manuten√ß√£o:
                </Text>

                <View style={styles.servicesContainer}>
                    {COMMON_SERVICES.map((service) => (
                        <Chip
                            key={service}
                            selected={selectedServices.includes(service)}
                            onPress={() => {
                                if (selectedServices.includes(service)) {
                                    setSelectedServices(prev => prev.filter(s => s !== service));
                                } else {
                                    setSelectedServices(prev => [...prev, service]);
                                    setErrors(prev => ({ ...prev, services: '' }));
                                }
                            }}
                            style={[
                                styles.serviceChip,
                                selectedServices.includes(service) && styles.serviceChipSelected
                            ]}
                            textStyle={[
                                styles.serviceChipText,
                                selectedServices.includes(service) && styles.serviceChipTextSelected
                            ]}
                        >
                            {service}
                        </Chip>
                    ))}
                </View>

                {selectedServices.length > 0 && (
                    <View style={styles.selectedServicesInfo}>
                        <Text variant="bodySmall" style={styles.selectedServicesText}>
                            {selectedServices.length} servi√ßo(s) selecionado(s)
                        </Text>
                    </View>
                )}

                {errors.services && (
                    <Text style={styles.errorText}>{errors.services}</Text>
                )}
            </Card.Content>
        </Card>
    );

    // ‚úÖ Renderizar seletor de data
    const renderDateSelector = () => (
        <Card style={styles.card}>
            <Card.Content>
                <Text variant="titleMedium" style={styles.sectionTitle}>
                    Data da Manuten√ß√£o
                </Text>

                <TouchableOpacity
                    style={[
                        styles.dateSelector,
                        errors.date && styles.inputError
                    ]}
                    onPress={() => setShowDatePicker(true)}
                >
                    <MaterialCommunityIcons name="calendar" size={20} color={AppColors.primary} />
                    <Text variant="bodyMedium" style={styles.dateSelectorText}>
                        {date.toLocaleDateString('pt-BR')}
                    </Text>
                    <MaterialCommunityIcons name="chevron-down" size={20} color={AppColors.text} />
                </TouchableOpacity>

                {errors.date && (
                    <Text style={styles.errorText}>{errors.date}</Text>
                )}

                {showDatePicker && (
                    <DateTimePicker
                        value={date}
                        mode="date"
                        display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                        onChange={(event, selectedDate) => {
                            setShowDatePicker(Platform.OS === 'ios');
                            if (selectedDate) {
                                setDate(selectedDate);
                                setErrors(prev => ({ ...prev, date: '' }));
                            }
                        }}
                        maximumDate={new Date()}
                        minimumDate={new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)} // 60 dias atr√°s
                    />
                )}
            </Card.Content>
        </Card>
    );

    // ‚úÖ Renderizar campos de detalhes
    const renderDetailsFields = () => (
        <Card style={styles.card}>
            <Card.Content>
                <Text variant="titleMedium" style={styles.sectionTitle}>
                    Detalhes da Manuten√ß√£o
                </Text>

                <TextInput
                    label="Quilometragem Atual"
                    value={currentKm}
                    onChangeText={(text) => {
                        setCurrentKm(text);
                        setErrors(prev => ({ ...prev, currentKm: '' }));
                    }}
                    keyboardType="numeric"
                    style={styles.input}
                    error={!!errors.currentKm}
                    left={<TextInput.Icon icon="speedometer" />}
                />
                {errors.currentKm && (
                    <Text style={styles.errorText}>{errors.currentKm}</Text>
                )}

                <TextInput
                    label="Nome da Oficina"
                    value={workshopName}
                    onChangeText={(text) => {
                        setWorkshopName(text);
                        setErrors(prev => ({ ...prev, workshopName: '' }));
                    }}
                    style={styles.input}
                    error={!!errors.workshopName}
                    left={<TextInput.Icon icon="store" />}
                />
                {errors.workshopName && (
                    <Text style={styles.errorText}>{errors.workshopName}</Text>
                )}

                <TextInput
                    label="CNPJ da Oficina (opcional)"
                    value={workshopCnpj}
                    onChangeText={(text) => {
                        setWorkshopCnpj(text);
                        setErrors(prev => ({ ...prev, workshopCnpj: '' }));
                    }}
                    placeholder="00.000.000/0000-00"
                    style={styles.input}
                    error={!!errors.workshopCnpj}
                    left={<TextInput.Icon icon="identifier" />}
                />
                {errors.workshopCnpj && (
                    <Text style={styles.errorText}>{errors.workshopCnpj}</Text>
                )}

                <TextInput
                    label="Endere√ßo da Oficina (opcional)"
                    value={workshopAddress}
                    onChangeText={setWorkshopAddress}
                    style={styles.input}
                    left={<TextInput.Icon icon="map-marker" />}
                />

                <TextInput
                    label="Valor Total"
                    value={value}
                    onChangeText={(text) => {
                        setValue(text);
                        setErrors(prev => ({ ...prev, value: '' }));
                    }}
                    keyboardType="numeric"
                    style={styles.input}
                    error={!!errors.value}
                    left={<TextInput.Icon icon="currency-brl" />}
                />
                {errors.value && (
                    <Text style={styles.errorText}>{errors.value}</Text>
                )}
            </Card.Content>
        </Card>
    );

    // ‚úÖ Renderizar uploader de documentos
    const renderDocumentUploader = () => (
        <Card style={styles.card}>
            <Card.Content>
                <Text variant="titleMedium" style={styles.sectionTitle}>
                    Documentos Comprobat√≥rios
                </Text>

                <Text variant="bodySmall" style={styles.sectionDescription}>
                    Adicione fotos, notas fiscais ou outros documentos que comprovem a manuten√ß√£o:
                </Text>

                <DocumentUploader
                    documents={documents}
                    onDocumentsChange={setDocuments}
                    maxDocuments={10}
                />
            </Card.Content>
        </Card>
    );

    // ‚úÖ Renderizar bot√µes de a√ß√£o
    const renderActionButtons = () => (
        <View style={styles.actionButtons}>
            <Button
                mode="outlined"
                onPress={handleCancel}
                style={[styles.button, styles.cancelButton]}
                labelStyle={styles.cancelButtonText}
            >
                Cancelar
            </Button>

            <Button
                mode="contained"
                onPress={handleSaveChanges}
                loading={isUpdating}
                disabled={isUpdating}
                style={[styles.button, styles.saveButton]}
                labelStyle={styles.saveButtonText}
            >
                Salvar Altera√ß√µes
            </Button>
        </View>
    );

    return (
        <View style={styles.container}>
            <ScrollView
                style={styles.scrollView}
                contentContainerStyle={styles.scrollContent}
                showsVerticalScrollIndicator={false}
            >
                {renderVehicleSelector()}
                {renderServicesSelector()}
                {renderDateSelector()}
                {renderDetailsFields()}
                {renderDocumentUploader()}
                {renderActionButtons()}
            </ScrollView>

            {renderVehicleModal()}
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: AppColors.white,
    },
    scrollView: {
        flex: 1,
    },
    scrollContent: {
        padding: 16,
        paddingBottom: 32,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    errorContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    errorTitle: {
        marginTop: 16,
        marginBottom: 8,
        textAlign: 'center',
        color: AppColors.danger,
    },
    headerButton: {
        marginLeft: 16,
        padding: 8,
    },
    card: {
        marginBottom: 16,
        elevation: 2,
    },
    sectionTitle: {
        marginBottom: 12,
        color: AppColors.text,
        fontWeight: '600',
    },
    sectionDescription: {
        marginBottom: 16,
        color: AppColors.text,
        opacity: 0.7,
        lineHeight: 20,
    },

    // Vehicle selector styles
    vehicleSelector: {
        borderWidth: 1,
        borderColor: AppColors.gray,
        borderRadius: 8,
        padding: 12,
        backgroundColor: AppColors.white,
    },
    vehicleSelectorContent: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    vehicleSelectorText: {
        flex: 1,
        marginLeft: 12,
        color: AppColors.text,
    },
    placeholder: {
        opacity: 0.6,
    },

    // Modal styles
    modalOverlay: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        justifyContent: 'flex-end',
    },
    modalContent: {
        backgroundColor: AppColors.white,
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        maxHeight: '80%',
        paddingBottom: 20,
    },
    modalHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 20,
        borderBottomWidth: 1,
        borderBottomColor: AppColors.gray,
    },
    vehicleItem: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: 16,
        borderBottomWidth: 1,
        borderBottomColor: AppColors.gray,
    },
    vehicleItemSelected: {
        backgroundColor: '#f0f9ff',
    },
    vehicleItemInfo: {
        flex: 1,
        marginLeft: 12,
    },
    vehicleItemDetails: {
        color: AppColors.text,
        opacity: 0.7,
        marginTop: 2,
    },

    // Services styles
    servicesContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 8,
        marginBottom: 12,
    },
    serviceChip: {
        backgroundColor: AppColors.gray,
        borderColor: AppColors.gray,
    },
    serviceChipSelected: {
        backgroundColor: AppColors.primary,
    },
    serviceChipText: {
        color: AppColors.text,
        fontSize: 12,
    },
    serviceChipTextSelected: {
        color: AppColors.white,
    },
    selectedServicesInfo: {
        padding: 8,
        backgroundColor: '#f0f9ff',
        borderRadius: 6,
        marginTop: 8,
    },
    selectedServicesText: {
        color: AppColors.primary,
        textAlign: 'center',
    },

    // Date selector styles
    dateSelector: {
        flexDirection: 'row',
        alignItems: 'center',
        borderWidth: 1,
        borderColor: AppColors.gray,
        borderRadius: 8,
        padding: 12,
        backgroundColor: AppColors.white,
    },
    dateSelectorText: {
        flex: 1,
        marginLeft: 12,
        color: AppColors.text,
    },

    // Input styles
    input: {
        marginBottom: 12,
        backgroundColor: AppColors.white,
    },
    inputError: {
        borderColor: AppColors.danger,
    },
    errorText: {
        color: AppColors.danger,
        fontSize: 12,
        marginTop: 4,
        marginLeft: 4,
    },

    // Action buttons styles
    actionButtons: {
        flexDirection: 'row',
        gap: 12,
        marginTop: 24,
        marginBottom: 16,
    },
    button: {
        flex: 1,
        paddingVertical: 8,
    },
    cancelButton: {
        borderColor: AppColors.gray,
    },
    cancelButtonText: {
        color: AppColors.text,
        fontWeight: '600',
    },
    saveButton: {
        backgroundColor: AppColors.primary,
    },
    saveButtonText: {
        color: '#000000', // ‚úÖ Texto preto conforme solicitado
        fontWeight: '600',
    },
});
